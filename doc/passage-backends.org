#+MACRO: PASSAGE PASSAGE

#+TITLE: {{{PASSAGE}}}
#+DATE: [2025-02-18 Mar]
#+AUTHOR: chat-wane
#+EMAIL: grumpy dot chat dot wane at gmail dot com

#+HTML_DOCTYPE: html5
#+HTML_XML_DECL: none # this removes <?xml â€¦> that prevents vite from serving

#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: prop:t
#+OPTIONS: html-postamble:nil # removes the footer

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/font.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/style.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/code.css" />
#+HTML_HEAD: <script src="../js/network.js" type="text/javascript"></script>
#+HTML_HEAD: <script src="../js/main.js" type="text/javascript"></script>
#+HTML_HEAD: <link rel="stylesheet" href="../node_modules/@fortawesome/fontawesome-free/css/all.min.css" />


#+BEGIN_CENTER
*Backends*

*Storing RDF Data, creating Knowledge Graphs.*
#+END_CENTER

With {{{PASSAGE}}}, we want to provide end-users with correct and
complete results without having to modify the already stored
data. This becomes crucial when the dataset comprises billions of
triples/quads that could take days to ingest.

The same {{{PASSAGE}}} Java engine supports any backend, granted the
latter implements our provided interface.


* Blazegraph

With our first release, we focused on [[https://blazegraph.com/][Blazegraph]]. Despite its
terminated support, it presents a unique feature that we can take
advantage of, to pause and continue query executions:

It uses an *augmented* balanced tree for each index, i.e., a counter
is associated with each tree nodes that allows {{{PASSAGE}}} to
efficiently skip large part of triple/quad patterns. Simple SPARQL
queries like the following are efficiently computed:
#+BEGIN_right-comment
The time complexity to create range query iterators is logarithmic
compared to the number of elements matching the pattern.
#+END_right-comment

#+BEGIN_SRC sparql :url https://query.wikidata.org/sparql :format text/csv :cache yes :synch no :exports code
  SELECT * WHERE {         # A SELECT query or sub-query
    BIND (rdf:type AS ?p)  # Var(s) assignment(s)
    ?s ?p ?o               # One triple/quad pattern only
  } OFFSET 10000000        # May need to skip a lot of elements
#+END_SRC


* Contributing

To improve adoption, one major aspect of continuation queries concerns
the support for databases such as [[https://jena.apache.org/][Apache Jena]], [[https://rdf4j.org/][RDF4J]], or [[https://www.rdfhdt.org/][HDT]].

*** Adding Support

Our aim is to support many databases with minimal effort, without
modifying the data. To that end, one must implement the interface
[[https://github.com/passage-org/passage/blob/main/passage-commons/src/main/java/fr/gdd/passage/commons/interfaces/Backend.java][=Backend=]]. This interface requires three templates =<ID, VALUE, SKIP>=
since most data structures rely on identifiers =<ID>= for storing the
triples/quads but on their own =<VALUE>= to store their actual value
(often in a separated dictionary).

Then, backends must provide a range query search that instantiate an
iterator:
#+BEGIN_SRC java :exports code
  BackendIterator<ID, VALUE, SKIP> search(final ID s, final ID p, final ID o);
#+END_SRC

Among other, the iterators must provide a skipping mechanism:
#+BEGIN_SRC java :exports code
  void skip(final SKIP to);
#+END_SRC

*** TODO Tests

*** TODO Benchmarks

* TODO References


