#+MACRO: PASSAGE PASSAGE

#+TITLE: {{{PASSAGE}}}
#+DATE: [2025-02-21 Fri]
#+AUTHOR: chat-wane
#+EMAIL: grumpy dot chat dot wane at gmail dot com

#+HTML_DOCTYPE: html5
#+HTML_XML_DECL: none # this removes <?xml …> that prevents vite from serving

#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: html-postamble:nil # removes the footer
#+OPTIONS: H:1
#+OPTIONS: prop:nil # hide the properties

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/font.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/style.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/code.css" />
#+HTML_HEAD: <script src="../js/network.js" type="text/javascript"></script>
#+HTML_HEAD: <script src="../js/main.js" type="text/javascript"></script>
#+HTML_HEAD: <link rel="stylesheet" href="../node_modules/@fortawesome/fontawesome-free/css/all.min.css" />


#+BEGIN_CENTER
*Smart Clients*

*To Automate Partial Executions until Completion.*
#+END_CENTER


{{{PASSAGE}}} 

* Contributing
:PROPERTIES:
:CUSTOM_ID: contributing
:END:

{{{PASSAGE}}} solely relies on the SPARQL standard to pause and resume
a query execution until completion. When a SPARQL continuation query
is sent back by the SPARQL endpoint, the requester is in charge of
returning it back to the endpoint, to get complete results.

*** TODO example using ~curl~.

It remains tedious… Instead, we [[https://github.com/passage-org/passage-comunica][added an actor]] to the smart client
[[https://comunica.dev/][Comunica]]. With a few lines of code, this web client is able to
decompose the query to run locally the operators that the remote
endpoint cannot handle.

*** TODO example of decomposed plan.

Contributions in this area are twofolds:

+ Keep the smart client up-to-date with Comunica. /For instance, the
  current implementation sets the subset of operations handled by
  {{{PASSAGE}}}. Instead, the server should advertise it./


+ Implement the same logic in other smart client. /While Comunica
  provides a convenient browser experience, it lacks some
  multithreading capabilities. Other engines such as [[https://github.com/LiUSemWeb/HeFQUIN][HeFQUIN]] could
  fill this gap./

* References

#+INCLUDE: "../references.org::References" :only-contents t
