#+MACRO: PASSAGE Passage

#+TITLE: {{{PASSAGE}}}'s Homepage
#+DATE: [2025-02-18 Mar]
#+AUTHOR: chat-wane
#+EMAIL: grumpy dot chat dot wane at gmail dot com

#+HTML_DOCTYPE: html5
#+HTML_XML_DECL: none # this removes <?xml …> that prevents vite from serving

#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: prop:nil # hide properties

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/css/font.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/css/root.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/css/homepage.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/css/code.css" />

#+BIBLIOGRAPHY: "../bibliography.bib"
#+cite_export: csl ../springer-basic-brackets-no-et-al-alphabetical.csl

#+BEGIN_EXPORT html
<h1>Engine: SPARQL query execution with continuations.</h1>
#+END_EXPORT


First and foremost, {{{PASSAGE}}} is a regular SPARQL query engine. It
takes SPARQL queries as input, and returns result mappings as output.
#+BEGIN_right-comment
plus a SPARQL continuation query as output metadata, to resume the
query execution if it has been stopped.
#+END_right-comment

However, contrarily to other SPARQL engines, {{{PASSAGE}}} does not
simply abort its query execution when it reaches its timeout
threshold: It returns the partial results of the executed query, *along with*
a continuation query that allows for retrieving the missing results if
any [cite:@pham2025passage].

Enabling pausing at any time requires the use of specific
physical operators.  Physical operators that do not require a large
state to restart from where it paused. For instance, if we
oversimplify the execution of a triple pattern, it returns the
elements of a list; resuming its execution only consists in jumping to
the offset where it paused.

* Core SPARQL

For the first release, we focused on a subset of SPARQL operators
called core SPARQL [cite:@perez2009semantics], comprising triple/quad patterns, basic graph
patterns, joins, unions, filters, and optionals.

#+NAME: supported-operators
#+BEGIN_SRC shell :results output :exports none :eval yes
echo "\
  Operator,     Support,    Comment
  tp/qp   ,     =0.0.1=,
  Join    ,     =0.0.1=,    Nested loop join and mapping at a time.
  BGP     ,     =0.0.1=,    BGPs are transformed in a series of joined tp/qp.
  Union   ,     =0.0.1=,    
  Values  ,     =0.0.1=,
  Filter  ,     =0.0.1=, "
#+END_SRC

#+BEGIN_SRC emacs-lisp :var data=supported-operators :results raw :exports results :eval yes
  (with-temp-buffer
    (insert data)
    (org-table-convert-region (point-min) (point-max) ",")
    (buffer-string))
#+END_SRC

#+RESULTS:
| Operator | Support | Comment                                           |
| tp/qp    | =0.0.1= |                                                   |
| Join     | =0.0.1= |                                                   |
| BGP      | =0.0.1= | BGPs are transformed in a series of joined tp/qp. |
| Union    | =0.0.1= |                                                   |
| Values   | =0.0.1= |                                                   |
| Filter   | =0.0.1= |                                                   |

* Contributing
:PROPERTIES:
:CUSTOM_ID: contributing
:END:

But the principle of continuation queries goes beyond these
operators. For instance, we already know that a subset of aggregation
queries allow continuation…

*** TODO example of a continuation query using aggregates.

*** TODO How to create an engine
*** TODO Where to add an operator
*** TODO Where the tests are


* References

#+print_bibliography:
